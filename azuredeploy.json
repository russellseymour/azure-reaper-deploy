{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "prefix": {
          "type": "string",
          "defaultValue": "AZReaper",
          "metadata": {
              "description": "Prefix that will be applied to all deployed resources. Lower case version will be the name of the App Service (Website)"
          }
      },
      "spTier": {
          "type": "string",
          "defaultValue": "Standard"
      },
      "spName": {
          "type": "string",
          "defaultValue": "S1"
      },
      "spSize": {
          "type": "string",
          "defaultValue": "S1"
      },
      "spFamily": {
          "type": "string",
          "defaultValue": "S"
      },
      "spCapacity": {
          "type": "int",
          "defaultValue": 1
      },
      "autoDiscoverSASToken": {
          "type": "bool",
          "defaultValue": false,
          "metadata": {
              "description": "State if the template should try to auto discover the SAS token from the deployment. This is used when building and testing the template in Azure DevOps."
          }
      },
      "azureStorageSASToken": {
          "type": "string",
          "metadata": {
              "description": "SAS token that has been generated if the templates are to be read from azure table storage"
          },
          "defaultValue": ""
      },
      "reaperRepoUrl": {
        "type": "string",
        "metadata": {
          "description": "URL for the repo containing the code for the Reaper"
        },
        "defaultValue": "https://github.com/russellseymour/azure-reaper"
      },
      "reaperRepoBranch": {
        "type": "string",
        "metadata": {
          "description": "The branch that the code should be deployed from"
        },
        "defaultValue": "release"
      },
      "baseUrl": {
          "type": "string",
          "defaultValue": ""
      },
      "uniqueShort": {
          "type": "string",
          "metadata": {
              "description": "A string of 4 or 5 characters that will be used to help uniquely identify the resources that are created. If this is not specified then a value will be automatically created."
          },
          "defaultValue": ""
      }
  },
  "variables": {
      "location": "[resourceGroup().location]",
      "unique": "[uniqueString(subscription().subscriptionId, resourceGroup().id, deployment().name)]",
      "uniqueShort": "[if(empty(parameters('uniqueShort')), substring(variables('unique'), 0, 4), parameters('uniqueShort'))]",
      "baseUrl": "[if(not(empty(parameters('baseUrl'))), if(endsWith(parameters('baseUrl'), '/'), parameters('baseUrl'), concat(parameters('baseUrl'), '/')), if(contains(deployment().properties, 'templateLink'), uri(deployment().properties.templateLink.uri, '.'), ''))]",
      "name": {
          "storageAccount": "[variables('unique')]",
          "sa": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-SA')]",
          "servicePlan": "[concat(parameters('prefix'), '-ServicePlan')]",
          "applicationInsights": "[concat(parameters('prefix'), '-AppInsights')]",
          "actionGroup": "[concat(parameters('prefix'), '-ActionGroup')]",
          "actionGroupShortName": "[concat(parameters('prefix'), '-ag')]",
          "activityLogAlerts": "[concat(parameters('prefix'), '-ActivityLogAlert')]",
          "site": "[concat(toLower(parameters('prefix')), '-', variables('uniqueShort'))]",
          "cosmosdb": "[concat(toLower(parameters('prefix')), '-', variables('uniqueShort'))]",
          "connection": "AlertQueueConnection",
          "logicApps": {
              "alert": "[concat(parameters('prefix'), '-LogAlert-LogicApp')]"
          },
          "azurequeues": "[concat(parameters('prefix'), '-APIConnection')]",
          "queue": "logalertqueue"
      },
      "servicePlan": {
          "tier": "[parameters('spTier')]",
          "name": "[parameters('spName')]",
          "size": "[parameters('spSize')]",
          "family": "[parameters('spFamily')]",
          "capacity": "[parameters('spCapacity')]"
      },
      "repo": {
        "url": "[parameters('reaperRepoUrl')]",
        "branch": "[parameters('reaperRepoBranch')]"
      },
      "apiVersions": {
          "applicationInsights": "2015-05-01",
          "actionGroup": "2019-06-01",
          "activityLogAlerts": "2020-10-01",
          "connections": "2016-06-01",
          "cosmosdb": "2020-09-01",
          "deployments": "2020-10-01",
          "logicApp": "2019-05-01",
          "serverFarms": "2020-09-01",
          "sites": "2020-09-01",
          "sourceControls": "2020-09-01",
          "storageAccount": "2019-06-01"
      },
      "sasTokenFromDeployment": "[if(parameters('autoDiscoverSASToken'), if(contains(deployment().properties, 'templateLink'), if(equals(length(split(deployment().properties.templateLink.uri, '?')), 2), last(split(deployment().properties.templateLink.uri, '?')), ''), ''), '')]",
      "templateUrlQueryString": "[if(empty(parameters('azureStorageSASToken')), if(empty(variables('sasTokenFromDeployment')), '', concat('?', variables('sasTokenFromDeployment'))), concat('?', parameters('azureStorageSASToken')))]",
      "urls": {
          "storageAccount": "[concat(variables('baseUrl'), 'src/storage-account.json', variables('templateUrlQueryString'))]",
          "cosmosdb": "[concat(variables('baseUrl'), 'src/cosmosdb.json', variables('templateUrlQueryString'))]",
          "applicationInsights": "[concat(variables('baseUrl'), 'src/application-insights.json', variables('templateUrlQueryString'))]",
          "appServicePlan": "[concat(variables('baseUrl'), 'src/app-service-plan.json', variables('templateUrlQueryString'))]",
          "appService": "[concat(variables('baseUrl'), 'src/app-service.json', variables('templateUrlQueryString'))]",
          "apiConnection": "[concat(variables('baseUrl'), 'src/apiConnections/azurequeue.json', variables('templateUrlQueryString'))]",
          "logicApps": {
              "alert": "[concat(variables('baseUrl'), 'src/logicApps/alert.json', variables('templateUrlQueryString'))]"
          },
          "actionGroup": "[concat(variables('baseUrl'), 'src/action-group.json', variables('templateUrlQueryString'))]",
          "activityLogAlert": "[concat(variables('baseUrl'), 'src/activity-logalert.json', variables('templateUrlQueryString'))]"
      }
  },
  "resources": [
      {
          "type": "Microsoft.Resources/deployments",
          "name": "[concat(variables('name').sa, '-Deployment')]",
          "apiVersion": "[variables('apiVersions').deployments]",
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('urls').storageAccount]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": {
                  "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  },
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "storageAccountName": {
                      "value": "[variables('name').storageAccount]"
                  },
                  "tags": {
                      "value": {
                          "description": "Storage account used for troubleshooting and function storage"
                      }
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "name": "[concat(variables('name').cosmosdb, '-CosmosDB-Deployment')]",
          "apiVersion": "[variables('apiVersions').deployments]",
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('urls').cosmosdb]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": {
                  "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  },
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "name": {
                      "value": "[variables('name').cosmosdb]"
                  },
                  "tags": {
                      "value": {
                          "description": "Data storage for settings, subscriptions and timezones"
                      }
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "name": "[concat(variables('name').applicationInsights, '-Deployment')]",
          "apiVersion": "[variables('apiVersions').deployments]",
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('urls').applicationInsights]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": {
                  "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  },                  
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "name": {
                      "value": "[variables('name').applicationInsights]"
                  },
                  "tags": {
                      "value": {
                          "description": "Monitoring for the functions website"
                      }
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "name": "[concat(variables('name').servicePlan, '-Deployment')]",
          "apiVersion": "[variables('apiVersions').deployments]",
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('urls').appServicePlan]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": {
                  "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  }, 
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "name": {
                      "value": "[variables('name').servicePlan]"
                  },
                  "sku": {
                      "value": "[variables('servicePlan')]"
                  },
                  "tags": {
                      "value": {
                          "description": "Web server farm to host the function"
                      }
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "name": "[concat(variables('name').site, '-Site-Deployment')]",
          "apiVersion": "[variables('apiVersions').deployments]",
          "dependsOn": [
              "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]",
              "[concat('Microsoft.Resources/deployments/', variables('name').servicePlan, '-Deployment')]",
              "[concat('Microsoft.Resources/deployments/', variables('name').applicationInsights, '-Deployment')]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('urls').appService]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": {
                  "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  }, 
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "name": {
                      "value": "[variables('name').site]"
                  },
                  "repoUrl": {
                    "value": "[variables('repo').url]"
                  },
                  "repoBranch": {
                    "value": "[variables('repo').branch]"
                  },
                  "tags": {
                      "value": {
                          "description": "Website app service to store the various functions required for the Chef Managed App"
                      }
                  },
                  "servicePlanId": {
                      "value": "[reference(concat(variables('name').servicePlan, '-Deployment')).outputs.id.value]"
                  },
                  "storageAccountName": {
                      "value": "[variables('name').storageAccount]"
                  },
                  "applicationInsightsInstrumentationKey": {
                      "value": "[reference(concat(variables('name').applicationInsights, '-Deployment')).outputs.instrumentationKey.value]"
                  },
                  "cosmosdbName": {
                      "value": "[variables('name').cosmosdb]"
                  },
                  "cosmosdbKey": {
                      "value": "[reference(concat(variables('name').cosmosdb, '-CosmosDB-Deployment')).outputs.key.value]"
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "name": "[concat(variables('name').azurequeues, '-Deployment')]",
          "apiVersion": "[variables('apiVersions').deployments]",
          "dependsOn": [
              "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('urls').apiConnection]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": {
                  "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  },
                  "name": {
                      "value": "[variables('name').azurequeues]"
                  },
                  "saName": {
                      "value": "[variables('name').storageAccount]"
                  },
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "tags": {
                      "value": {
                          "description": "API Connection to the Storage Account for Logic Apps"
                      }
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "name": "[concat(variables('name').logicApps.alert, '-Deployment')]",
          "apiVersion": "[variables('apiVersions').deployments]",
          "dependsOn": [
              "[concat('Microsoft.Resources/deployments/', variables('name').azurequeues, '-Deployment')]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('urls').logicApps.alert]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": {
                  "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  },                  
                  "name": {
                      "value": "[variables('name').logicApps.alert]"
                  },
                  "queue_name": {
                      "value": "[variables('name').queue]"
                  },
                  "azurequeues": {
                      "value": "[variables('name').azurequeues]"
                  },
                  "connection_name": {
                      "value": "[variables('name').azurequeues]"
                  },
                  "location": {
                      "value": "[variables('location')]"
                  },
                  "tags": {
                      "value": {
                          "description": "Log App to recieve the alert that is generated when a new eresource group is created"
                      }
                  }
              }
          }
      },
      {
          "type": "Microsoft.Resources/deployments",
          "name": "[concat(variables('name').actionGroup, '-Deployment')]",
          "apiVersion": "[variables('apiVersions').deployments]",
          "dependsOn": [
              "[concat('Microsoft.Resources/deployments/', variables('name').logicApps.alert, '-Deployment')]"
          ],
          "properties": {
              "mode": "Incremental",
              "templateLink": {
                  "uri": "[variables('urls').actionGroup]",
                  "contentVersion": "1.0.0.0"
              },
              "parameters": {
                  "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  },  
                  "name": {
                      "value": "[variables('name').actionGroup]"
                  },
                  "short_name": {
                      "value": "[variables('name').actionGroupShortName]"
                  },
                  "logicapp_name": {
                      "value": "[variables('name').logicApps.alert]"
                  },
                  "tags": {
                      "value": {
                          "description": "Actions that need to be performed when a new resource group has been created"
                      }
                  }
              }
          }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "name": "[concat(variables('name').activityLogAlerts, '-Deployment')]",
        "apiVersion": "[variables('apiVersions').deployments]",
        "dependsOn": [
          "[concat('Microsoft.Resources/deployments/', variables('name').actionGroup, '-Deployment')]"
        ],
        "properties": {
            "mode": "Incremental",
            "templateLink": {
                "uri": "[variables('urls').activityLogAlert]",
                "contentVersion": "1.0.0.0"
            },
            "parameters": {
                "apiVersions": {
                      "value": "[variables('apiVersions')]"
                  },
                "name": {
                    "value": "[variables('name').activityLogAlerts]"
                },
                "action_group_name": {
                    "value": "[variables('name').actionGroup]"
                },
                "tags": {
                    "value": {
                        "description": "Alert generated when a new resource group is created"
                    }
                }
            }
        }
    }
  ],
  "outputs": {

  }
}